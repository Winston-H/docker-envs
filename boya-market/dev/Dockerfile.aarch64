FROM multiarch/ubuntu-core:arm64-bionic


ARG PASSWORD_root=kietaev4aeb4Acus
ARG SSH_KEY_root
ARG GID_boya=117640
ARG GID_boya_market=117641
ARG UID_boya_market=276591
ARG PASSWORD_boya_market=thu4Aefiexei3nai
ARG GID_boya_sip=117642
ARG UID_boya_sip=276592
ARG PASSWORD_boya_sip=oovahed4yooyagh4


ENV GO_VERSION=1.12.7
ENV NODEJS_VERSION_MAJOR=12


USER root


#
# prepare base OS and tools
#
RUN if true; then true \
 && export DEBIAN_FRONTEND="noninteractive" \
 && sed -i -e 's,//\(archive.ubuntu.com\),//cn.\1,g' /etc/apt/sources.list \
 && apt-get update \
 && echo "Install dev tools and libs" \
 && echo "Asia/Shanghai" > /etc/timezone \
 && apt-get install -y \
        apt-utils \
        build-essential \
        bzip2 \
        ccache \
        cmake \
        curl \
        dnsutils \
        git \
        iproute2 \
        iputils-ping \
        iputils-tracepath \
        locales \
        locales-all \
        mosh \
        net-tools \
        nmap \
        nmon \
        openssh-server \
        p7zip \
        p7zip-full \
        patchelf \
        rsync \
        screen \
        sudo \
        tcpdump \
        tmux \
        tzdata \
        vim \
        wget \
 && echo "Install Python3 deps" \
 && apt-get install -y \
        cython3 \
        ipython3 \
        python3 \
        python3-dev \
        python3-lxml \
        python3-numpy \
        python3-virtualenv \
        virtualenv \
        virtualenv-clone \
        virtualenvwrapper \
 && echo "Install OpenCV deps" \
 && apt-get install -y \
        python3-opencv \
        libavcodec-dev \
        libavformat-dev \
        libgstreamer-plugins-base1.0-dev \
        libgstreamer1.0-dev \
        libgtk-3-dev \
        libjpeg-dev \
        libopenexr-dev \
        libpng-dev \
        libswscale-dev \
        libtiff-dev \
        libwebp-dev \
 && echo "Install Platform deps" \
 && apt-get install -y \
        libffi-dev \
        libgl1-mesa-glx \
        libssl-dev \
        libxml2 \
        libxml2-dev \
        mongodb \
        munge \
        nginx \
        rabbitmq-server \
        redis-sentinel \
        redis-server \
        redis-tools \
        slurm-wlm \
        zlib1g \
        zlib1g-dev \
 && apt-get clean \
 && true; fi


#
# prepare GO language env.
#
# NOTE:
# * take long time to download, be patient.
#
RUN if false; then true \
 && export DEBIAN_FRONTEND="noninteractive" \
 && true GO_INSTALLER_URL_PREFIX="https://dl.google.com/go/" \
 && GO_INSTALLER_URL_PREFIX="https://studygolang.com/dl/golang/" \
 && GO_INSTALLER="go${GO_VERSION}.linux-arm64.tar.gz" \
 && curl -fSLO ${GO_INSTALLER_URL_PREFIX}${GO_INSTALLER} \
 && tar -xzf ${GO_INSTALLER} -C /usr/local/ \
 && rm -f ${GO_INSTALLER} \
 && echo 'export PATH=$PATH:/usr/local/go/bin' >/etc/profile.d/golang.sh \
 && true; fi


#
# prepare Node.js env.
#
# NOTE:
# * take long time to download and install. be patient.
#
RUN if false; then true \
 && export DEBIAN_FRONTEND="noninteractive" \
 && NODEJS_INSTALLER_URL_PREFIX="https://deb.nodesource.com/" \
 && NODEJS_INSTALLER="setup_${NODEJS_VERSION_MAJOR}.x" \
 && curl -fSL ${NODEJS_INSTALLER_URL_PREFIX}${NODEJS_INSTALLER} | sudo -E bash - \
 && rm -f ${NODEJS_INSTALLER} \
 && apt-get install -y nodejs \
 && npm install --global \
        apidoc \
        cnpm \
        cross-env \
        mkdirp \
        rimraf \
 && apt-get clean \
 && true; fi


#
# install anaconda
#
# NOTE:
# * take long time to download and install. be patient.
#
RUN if false; then true \
 && export DEBIAN_FRONTEND="noninteractive" \
 && true CONDA_INSTALLER_URL_PREFIX="https://repo.continuum.io/miniconda/" \
 && CONDA_INSTALLER_URL_PREFIX="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/" \
 && CONDA_INSTALLER="Miniconda3-latest-Linux-x86_64.sh" \
 && curl -fSLO ${CONDA_INSTALLER_URL_PREFIX}${CONDA_INSTALLER} \
 && conda_install_home="/opt/anaconda3" \
 && bash ${CONDA_INSTALLER} -b -p ${conda_install_home} \
 && rm -f ${CONDA_INSTALLER} \
 && ln -s ${conda_install_home}/etc/profile.d/conda.sh /etc/profile.d/ \
 && apt-get clean \
 && true; fi


#
# prepare user dev env.
#
RUN true \
 && echo "root:${PASSWORD_root}" | chpasswd \
 && if [ -n "${SSH_KEY_root}" ]; then \
        mkdir -p ~root/.ssh \
     && chmod go-rwx ~root/.ssh \
     && echo "${SSH_KEY_root}" | sed -e 's/^"//g' -e 's/"$//g' -e 's/  *ssh-/\nssh-/g' >> ~root/.ssh/authorized_keys \
     && true; \
    fi \
 && sed -i -e 's/^#\? *\(PermitRootLogin\) .*$/\1 prohibit-password/g' /etc/ssh/sshd_config \
 && groupadd -g ${GID_boya} boya \
 && groupadd -g ${GID_boya_market} boya_market \
 && useradd -u ${UID_boya_market} -g boya_market -G sudo,boya -s /bin/bash -c "Boya market dev" -m boya_market \
 && echo "boya_market:${PASSWORD_boya_market}" | chpasswd \
 && groupadd -g ${GID_boya_sip} boya_sip \
 && useradd -u ${UID_boya_sip} -g boya_sip -G sudo,boya -s /bin/bash -c "Boya GB28181 dev" -m boya_sip \
 && echo "boya_sip:${PASSWORD_boya_sip}" | chpasswd \
 && true
